{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport web3 from \"../ethereum/web3\";\nimport { Input, Form, Button, Message, Grid } from \"semantic-ui-react\";\nimport Layout from \"./layout\";\nimport ait from \"../ethereum/Ait\";\nimport { Link } from \"../routes\";\n\nvar register =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(register, _Component);\n\n  function register() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, register);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(register)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      regno: 0,\n      name: \" \",\n      rollno: 0,\n      branch: \" \",\n      dob: \" \",\n      bloodGp: \"\",\n      errmsg: \"\",\n      loading: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function _callee() {\n      var _this$state, regno, name, rollno, branch, dob, bloodGp, accounts, manager;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n\n              _this.setState({\n                loading: true,\n                errmsg: \"\"\n              });\n\n              _this$state = _this.state, regno = _this$state.regno, name = _this$state.name, rollno = _this$state.rollno, branch = _this$state.branch, dob = _this$state.dob, bloodGp = _this$state.bloodGp;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(web3.eth.getAccounts());\n\n            case 5:\n              accounts = _context.sent;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(ait.methods.manager().call());\n\n            case 8:\n              manager = _context.sent;\n              _context.prev = 9;\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(ait.methods.register(regno, name, rollno, branch, dob, bloodGp).send({\n                from: accounts[0]\n              }));\n\n            case 12:\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](9);\n\n              _this.setState({\n                errmsg: _context.t0.message\n              });\n\n            case 17:\n              _this.setState({\n                loading: false\n              });\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[9, 14]]);\n    });\n\n    return _this;\n  }\n\n  _createClass(register, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, {\n        columns: 2\n      }, __jsx(Form, {\n        onSubmit: this.onSubmit,\n        error: !!this.state.errmsg\n      }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Registration No\"), __jsx(Input, {\n        value: this.state.regno,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            regno: event.target.value\n          });\n        }\n      })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Name\"), __jsx(Input, {\n        value: this.state.name,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            name: event.target.value\n          });\n        }\n      })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Roll No\"), __jsx(Input, {\n        value: this.state.rollno,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            rollno: event.target.value\n          });\n        }\n      })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Branch\"), __jsx(Input, {\n        value: this.state.branch,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            branch: event.target.value\n          });\n        }\n      })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Date of Birth\"), __jsx(Input, {\n        value: this.state.dob,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            dob: event.target.value\n          });\n        }\n      })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Blood Group\"), __jsx(Input, {\n        value: this.state.bloodGp,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            bloodGp: event.target.value\n          });\n        }\n      })), __jsx(Message, {\n        error: true,\n        header: \"opps\",\n        content: this.state.errmsg\n      }), __jsx(Button, {\n        primary: true,\n        loading: this.state.loading\n      }, \"Submit\")))), __jsx(Grid.Column, null, __jsx(Link, {\n        route: \"/change\"\n      }, __jsx(\"a\", null, __jsx(Button, {\n        primary: true,\n        floated: \"right\"\n      }, \"Edit Details!!!\"))))));\n    }\n  }]);\n\n  return register;\n}(Component);\n\nexport default register;","map":{"version":3,"sources":["/mnt/d/Cards/pages/register.js"],"names":["React","Component","web3","Input","Form","Button","Message","Grid","Layout","ait","Link","register","regno","name","rollno","branch","dob","bloodGp","errmsg","loading","event","preventDefault","setState","state","eth","getAccounts","accounts","methods","manager","call","send","from","message","onSubmit","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport web3 from \"../ethereum/web3\";\r\nimport { Input, Form, Button, Message, Grid } from \"semantic-ui-react\";\r\nimport Layout from \"./layout\";\r\nimport ait from \"../ethereum/Ait\";\r\nimport { Link } from \"../routes\";\r\n\r\nclass register extends Component {\r\n  state = {\r\n    regno: 0,\r\n    name: \" \",\r\n    rollno: 0,\r\n    branch: \" \",\r\n    dob: \" \",\r\n    bloodGp: \"\",\r\n    errmsg: \"\",\r\n    loading: false\r\n  };\r\n  onSubmit = async () => {\r\n    event.preventDefault();\r\n    this.setState({ loading: true, errmsg: \"\" });\r\n    const { regno, name, rollno, branch, dob, bloodGp } = this.state;\r\n    const accounts = await web3.eth.getAccounts();\r\n    // console.log(accounts[0]);\r\n    const manager = await ait.methods.manager().call();\r\n    try {\r\n      await ait.methods\r\n        .register(regno, name, rollno, branch, dob, bloodGp)\r\n        .send({ from: accounts[0] });\r\n    } catch (err) {\r\n      this.setState({ errmsg: err.message });\r\n    }\r\n    this.setState({ loading: false });\r\n  };\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <Grid>\r\n          <Grid.Row>\r\n            <Grid.Column columns={2}>\r\n              <Form onSubmit={this.onSubmit} error={!!this.state.errmsg}>\r\n                <Form.Field>\r\n                  <label>Registration No</label>\r\n                  <Input\r\n                    value={this.state.regno}\r\n                    onChange={event =>\r\n                      this.setState({ regno: event.target.value })\r\n                    }\r\n                  />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                  <label>Name</label>\r\n                  <Input\r\n                    value={this.state.name}\r\n                    onChange={event =>\r\n                      this.setState({ name: event.target.value })\r\n                    }\r\n                  />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                  <label>Roll No</label>\r\n                  <Input\r\n                    value={this.state.rollno}\r\n                    onChange={event =>\r\n                      this.setState({ rollno: event.target.value })\r\n                    }\r\n                  />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                  <label>Branch</label>\r\n                  <Input\r\n                    value={this.state.branch}\r\n                    onChange={event =>\r\n                      this.setState({ branch: event.target.value })\r\n                    }\r\n                  />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                  <label>Date of Birth</label>\r\n                  <Input\r\n                    value={this.state.dob}\r\n                    onChange={event =>\r\n                      this.setState({ dob: event.target.value })\r\n                    }\r\n                  />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                  <label>Blood Group</label>\r\n                  <Input\r\n                    value={this.state.bloodGp}\r\n                    onChange={event =>\r\n                      this.setState({ bloodGp: event.target.value })\r\n                    }\r\n                  />\r\n                </Form.Field>\r\n                <Message error header=\"opps\" content={this.state.errmsg} />\r\n\r\n                <Button primary loading={this.state.loading}>\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n\r\n          <Grid.Column>\r\n            <Link route={`/change`}>\r\n              <a>\r\n                <Button primary floated=\"right\">\r\n                  Edit Details!!!\r\n                </Button>\r\n              </a>\r\n            </Link>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default register;\r\n"]},"metadata":{},"sourceType":"module"}